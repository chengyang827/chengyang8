<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Javascript学习笔记（1）]]></title>
    <url>%2F5.html</url>
    <content type="text"><![CDATA[语言介绍JavaScript 简介JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是脚本语言JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码。JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。JavaScript 很容易学习。面向对象语言后面我会专门写一篇有关面向对象文章。基础语法操作符优先级（高到低）算数操作符 -&gt; 比较操作符 -&gt; 逻辑操作符 -&gt; “=”赋值符号​事件常用事件内置对象Javasscript中一切均对象，比如：字符串、数值、数组、函数等，对象拥有属性和方法，对象的属性如数组长度.length，后面不加（）；对象方法后面加（）像函数。String对象定义字符串对象方法toUpperCase()将字符串转换为大写toLowerCase()将字符串转换为小写charAt(index)返回指定位置字符indexOf(指定字符串，开始检索的位置)返回指定字符串首次出现的位置split(指定分割位置，分割次数)用于分割字符串，并返回数组类型substring(开始位置，结束位置+1)提取字符串，前闭后开substr(开始位置，长度)指定数目字符Date对象用于定义日期对象方法get/setFullYear() 返回/设置年份getDay()返回星期，返回数字0-6get/setTime()返回/设置时间Array对象用于定义数组对象对象属性length 返回数组长度对象方法Math对象对象属性对象方法浏览器对象window对象（窗口）对象方法window.history对象（浏览器历史）对象属性length 返回浏览器历史列表中url数量对象方法location对象（url信息）location对象属性对象方法navigator对象（包含浏览器信息）对象属性screen对象（获取屏幕信息）对象属性DOM对象（控制HTML网页）认识DOMDOM节点类型元素节点：上图中html、body、p等都是元素节点，即标签。文本节点:向用户展示的内容，如li标签中的JavaScript、DOM、CSS等文本。属性节点:元素属性，如a标签的链接属性href=”http://www.imooc.com&quot;。节点属性节点方法注意：前两个是document方法​]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fiddler,最好用的Web调试工具]]></title>
    <url>%2F4.html</url>
    <content type="text"><![CDATA[Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展。你对HTTP协议越了解，你就能越掌握Fiddler的使用方法.你越使用Fiddler,就越能帮助你了解HTTP协议。 Fiddler无论对开发人员或者测试人员来说，都是非常有用的工具。 Fiddler的官方网站：www.fiddler2.com Fiddle安装下载地址：https://www.telerik.com/download/fiddler-wizard请先选择版本下载，双击即可安装。 工作原理Fiddler是以代理web服务器的形式工作的,它使用代理地址:127.0.0.1, 端口:8888. 当运行Fiddler时会自动设置代理,退出的时候它会自动注销代理，不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下Fiddler。 常见使用环境 工具条常用功能工具栏从左到右按钮功能分别为： 增加备注——选中某个会话，点击按钮，可对会话添加备注 回放按钮——选中某个会话，点击按钮，回放对该会话的请求。快捷键为R 清空监控面板 调试Debug 模式切换——在流模式和缓冲模式之间切换，默认缓冲模式 解压请求——将HTTPS的请求解压，以便查看 保持会话——考虑电脑性能，自行选择 过滤请求——按下按钮不放，选择要捕获的软件进程，松开按钮，即可捕捉到该软件发出的所有请求 查找——点击，输入想查找的会话 保存会话 保存截图 计时器 快速启动浏览器 清除缓存15.编码/解码 状态栏操作 上面黑色区域为控制台，用于输入命令。 下面从左到右分别为：(1)控制Fiddler是否工作——图标出现：表示Fiddler工作；图标消失：表示Fiddler不工作(2)过滤会话来源(3)记录当前展示的会话数量(4)会话的详细地址 监控面板使用左侧框中常见项： “#”列：表示记录来自服务器端的请求会话”Result”列：表示会话状态”Protocol”列：表示协议”Host”列：表示主机地址/域名 右侧框中常见项： “Statistics”项：表示请求的性能指标”Show Chart”项：表示可视化”Inspectors”项：表示对请求解包”AutoResponder”项：表示文件代理”Composer”项：表示前后端接口连调”Log”项：表示记录log日志”Timeline”项：表示网站性能分析 文件、文件夹代理和HOST配置HOST配置 这个功能主要作用就是不需要每次配置hosts都到windows目录下去修改hosts文件；可以直接方便在fiddler界面里面配置即可；方便快速的配置自己的测试host。 步骤如下：Tools》HOSTS》激活Enable功能》选择服务器IP，修改要配置的Host的IP》save》刷新可启用 文件、文件夹代理选中文件，拖入AutoResponders界面》精准匹配》选择本地文件》保存即可生效 请求模拟,前后端接口调试 网速限制方法一： Fiddle提供了一个功能，让我们模拟低速网路环境…启用方法如下：Rules → Performances → Simulate Modem Speeds (如下图) 方法二： Fiddler也可以自己定义Modem Speeds.点开Rules → Customize Rules (如下图) 此时，如果没有安装FiddleScript插件，会弹出提示安装，点击确认即可安装；如果有安装插件，会弹出CustomRules.js的代码，找m_SimulateModem这个字，你会找到下面这段： 这就是他模拟网路速度的原理，每上传/下载1KB 要delay 多久。如果你习惯用kbps 去算的话，那么我们的算法就是 1000/下载速度 = 需要delay的时间(毫秒)，比如50kb/s 需要delay200毫秒来接收数据。 请注意，当你存档之后，原本已经勾选的Simulate Modem Speeds 会被取消勾选，要记得再到Rules → Performances → Simulate Modem Speeds 勾选，这样限制网速就成功了。 常用插件插件官方下载地址:www.telerik.com/fiddler/add-ons。Fiddle也支持第三方插件。 以下推荐几款插件： 1.代码格式化插件：JavaScript Formatter。安装完重启，右击会话，选择“Make JavaScript Pretty”,即可。如下图。 2.对比会话插件：Traffic Differ。安装完重启，可在“监控面板”右侧找到“Differ”选项，点击，拖动多个会话即可对比信息。如下图。 常见命令help //打开官方的使用页面介绍 select //选择会话命令 ?.png //用来选择png后缀的图片 cls //清屏 (Ctrl+x 也可以清屏) bpu //截获request 做人智商不高没关系，情商不高也问题不大，但做人的格局已定要大。说白了，你可以不聪明，也可以不懂交际，但一定要大气。如果一点点挫折就让你爬不起来，如果一两句坏话就让你不能释怀，如果动不动就讨厌人憎恨人，那格局就太小了。做人有多大气，就会有多成功。因为胸怀，才是成功者的标志。]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题打造炫酷的个性化Hexo博客]]></title>
    <url>%2F2.html</url>
    <content type="text"><![CDATA[上一篇博客，我主要介绍了为什么要建博客和如何建自己的博客，相信大家按照教程都能把自己的博客建起来。那么问题来了，建完的博客，不符合自己的口味怎么办？那就仔细看看这篇关于个性化博客的文章吧，相信你能有所收获。好，下面就来介绍如何具体搭建。 选择Next主题在hexo根目录下安装next主题，输入： git clone https://github.com/iissnan/hexo-theme-next themes/next 然后在站点配置文件_config.yml下修改字段theme的值为next，OK. 声明声明这篇博客是建立在你已经完成了官方Next使用文档的一些基础设置，如果你还没有设置，那么点击这里 实现fork me on github效果图：我是把图片放在右上角的，当然你也可以放在左上角，根据喜好而定。具体实现：点击这里选择你需要的样式复制代码，然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在的下面)，并把href改为你的github地址，如图 实现RSSRSS，又叫简易信息聚合，简单说，他主要用于网站内容的发布，使得其他站点能同步调用，具体是什么，可以参照百度词条,下面我主要介绍如何实现RSS。效果图：具体实现：1.在git bash中切换到hexo的根目录下即： cd d:/github/shaonbean/shaonbean(这是我的目录，你们根据自己的) 2.安装nodejs模块hexo-generator-feed npm isntall hexo-generator-feed --save 3.配置站点文件打开站点配置文件(hexo根目录下的)_config.yml，添加如下字段： # Extensions ## Plugins: http://hexo.io/plugins/ plugins: hexo-generate-feed 4.配置主题文件打开主配置文件_config.yml(next主题下的)，添加: # Set rss to false to disable feed link. # Leave rss as empty to use site&apos;s feed link. # Set rss to specific value if you have burned your feed already. rss: /atom.xml 5.生成atom.xml文件运行命令 hexo g 之后会在public文件夹下生成一个atom.xml文件，然后部署到github就可以了。 添加动态背景这里效果图看我博客就可以了。具体实现：在主题配置文件_config.yml下,搜索字段canvas 可以看到如下：这里的主题选择你喜欢的改为true就可以了。（注意：只能不能同时设置2个以上动态效果） 背景图片添加效果同样看我博客就可以。具体实现：进入这个目录下D:\github\shaonbean\shaonbean\themes\next\source\css_custom，打开custom.styl。这里说明一下，这个文件是设计这个主题的人专门为我们留的一个自定义设置样式的文件，我们在这里的css设置可以覆盖主题原来的，是不是很方便。 #添加背景图片 body { background:url(/uploads/background3.png); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; } 这样背景图片就添加好了，你们可以选择自己喜欢的图片添加到这个目录下themes\next\source\uploads，如果没有可以自己新建一个。 鼠标点击爱心效果效果见我博客。具体实现：1.打开这里，复制这段js代码，然后在themes/next/source/js/src下新建love.js文件，并将代码复制进去。2.打开themes\next\layout_layout.swig，在文件底部添加： &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 然后重新生成就可以了。 侧边栏社交小图标设置效果图：具体实现：打开主题配置文件_config.yml，搜索social,添加自己的社交链接，如下： 主页文章阴影效果效果图：具体实现：打开\themes\next\source\css_custom\custom.styl,向里面加入： // 主页文章添加阴影效果 .post { margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } 网站底部添加字数统计效果图：具体实现：1.切换到根目录，运行命令 npm install hexo-wordcount --save 2.然后在themes/next/layout/_partials/footer.swig文件尾部加上： &lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共{{ totalcount(site) }}字&lt;/span&gt; &lt;/div&gt; 设置网站效果图效果图：具体实现：将favicon图标放在source目录下就可以了，注意图片格式为32*32的后缀为ico的图片，.ico图片可以在线制作。 隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图： 文章加密访问效果图：具体实现：1.打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： &lt;script&gt; (function(){ if(&apos;{{ page.password }}&apos;){ if (prompt(&apos;请输入文章密码&apos;) !== &apos;{{ page.password }}&apos;){ alert(&apos;密码错误！&apos;); history.back(); } } })(); &lt;/script&gt; 2.然后在你的文章head中写成这样即可： 为博客加上萌宠效果请看我博客的右下角。具体实现：1.安装需要的模块 npm install hexo-helper-live2d --save 2.然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到之前： {{ live2d() }} 3.然后在站点配置文件中添加参数： live2d: model: tororo bottom: -30 之后重新hexo s 一下，效果就出现了。下面是一些model，可以换不同的宠物 model 模型名称 默认值: z16 Gantzert_Felixander Epsilon2.1 haru miku ni-j nico nito nipsilon shizuku tsumiki wanko z16 hibiki koharu Unitychan tororo hijiki 好了，到这里Next主题的个性化就结束了，不知道您对自己的博客是否还满意呢？如果你还想要更多有趣的内容，欢迎继续关注我的博客更新，你也可以自己慢慢摸索出新的有趣的东西。 使用Markdown语法撰写文章，点击这里。 当你们痛感生活的疾苦之时 会把出生唤作悲剧 会把养生视为诅咒 并且写在你们的额上 那么 我要对你们说 只有用你们额上的汗水 才能洗掉你们写在额上的字句]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客 个性化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《消愁》——毛不易]]></title>
    <url>%2F3.html</url>
    <content type="text"><![CDATA[（注明：网易云还没有引进毛不易的歌，所以我从别处下载然后用网易云生成的外链导致歌名没正常显示，还望谅解。） 当你走进这欢乐场 背上所有的梦与想 各色的脸上各色的妆 没人记得你的摸样 三巡酒过你在角落 固执的唱着苦涩的歌 听他在喧嚣里被淹没 你拿起酒杯对自己说 一杯敬朝阳 一杯敬月光 唤醒我的向往 温柔了寒窗 于是可以不回头的逆风飞翔 不怕心头有雨 眼底有霜 一杯敬故乡 一杯敬远方 守着我的善良 催着我成长 所以南北的路从此不再漫长 灵魂不再无处安放 一杯敬明天 一杯敬过往 支撑我的身体 厚重了肩膀 虽然从不相信所谓山高水长 人生苦短何必念念不忘 一杯敬自由 一杯敬死亡 宽恕我的平凡 驱散了迷惘 好吧天亮之后总是潦草离场 清醒的人最荒唐 好吧天亮之后总是潦草离场 清醒的人最荒唐这首歌是在一档综艺节目《明日之子》中火起来的，是由自称巨星的毛不易演唱，也是他的原唱歌曲。这首词写的真的很好。人生就像欢乐场，他用八杯酒敬了一个人的一生，借酒消愁愁更愁。一杯敬朝阳 一杯敬月光，是他敬少年的我们，向往未来，苦读寒窗；一杯敬故乡 一杯敬远方，是他敬青年的我们，故乡的亲人守着我们的善良，而远方正催着我们成长；一杯敬明天 一杯敬过往，已到中年时期支撑身体面对明天，因为过往厚重肩膀；一杯敬自由 一杯敬死亡，老年以至，唯有自由，别无他求。这八杯酒喝尽了一切的愁苦，有人说，他这么年轻怎么写的出这样的歌词，我觉得可能和他的职业有关吧，他是一名男护士，每天面对的是各种各样的人，所以写出这样的歌词也就可以理解了。在我看来，他是真正的明日之子。（以上纯属个人观点）]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>毛不易</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Hexo+Github Pages搭建自己的博客]]></title>
    <url>%2F1.html</url>
    <content type="text"><![CDATA[为什么要写博客？ 博客正式上线，非常高兴。搭建这个博客前前后后大概用了2天时间，当然美化是在一边使用的过程中慢慢完善的。废话不多扯，来说说我为什么要写博客。 可能很多人会认为做程序员的人什么的才需要写博客，真的是这样吗？事实并非如此，任何人都可以写博客，博客有人看当然最好，但是没人看的话就不写了吗？也许有人会这样想。但是我并不这样认为，我觉得写博客最重要的一点是对自己的提高。当然写博客还有很多有点，下面我来一一列举： 首先，写博客是对自己所学知识的总结。总结自己学过的东西是很重要的，再比如如果你对某个知识点不是特别了解的话，你可以通过写博客并查资料来巩固并深入了解这个知识点的内容，相信这对你来说会非常有意义。 其次，写博客也能锻炼你的语言组织表达能力。善于沟通无论在生活中还是工作中都非常重要，表达一件事情和光在脑子里想是完全不同的，如果你的表达能力太差，那么，你就不能说你所想，再比如你学习了一项技术，但是你不能把它表达出来，那说明你还没有完全掌握这项技术。 再者，写博客是对你写作能力的提升有极大的帮助。虽然，你开始写时会感觉很难写出好的东西来（就像我现在这样哈哈），但是只要坚持，我相信奇迹都会出现。写作是对思维的一种磨练，你会写作说明你是一个有思想的人。一个人有思想的活着总比浑浑噩噩好，你说是吧？ 当然，写博客也许会让你出名，前提是你得写出对大家有用的而且非常精悍的文字才行，谁不想出名呢，所以希望有着出名梦的你们（还有我）能坚持写博客。 而且，写博客也是面试的加分项。同样条件的两个面试者，一个写博客，一个不写，我相信面试官肯定会选择写博客的那一个，因为善于写博客的人对自己学习的知识都有一个总结，并且很勤快。 为什么要自己搭建博客？ 平台博客的局限性萌生写博客的念头后，我就在网上寻找各种建立博客的方法，有简单的就是直接在CSDN、博客园等平台上就可以写博客，但是听有的人说平台上写博客有太多局限，比如有些文章会被官方删除等等，这就很讨厌，还有一个缺点是广告多，这样体验会很不好，而且对我个人而言几乎一样的布局样式非常单调，显得很low。 Hexo+Github Pages的优点后来在掘金上无意间看见一篇利用github托管博客网站的帖子，于是仔细研究了下整个博客的搭建过程，也不难，于是各种寻找各种教程，虽然过程中踩了不少坑，但还是建成了，所以这一切都是值得的，为了让你们少踩些坑，我会在文章下面的内容中写出详细的搭建过程。不对，好像偏题了，说什么来着，对优点，我觉得最大的优点就是可以免费托管到github上，这可为我们学生党省了好多钱呢。当然，Hexo有很多非常美观的主题，我选择的是Next，下面我会仔细介绍主题的各种配置。 如何搭建自己的博客？ 了解Hexo、Github PagesHexo首先，我们得了解什么是Hexo。这是官方网站贴出的对Hexo的描述，快速、简洁、且高效的博客框架，其实这就是一个基于Nodejs的一个框架结构。通俗点讲的话，Hexo用于生成静态的HTML页面，从而显示给别人看的。而下面的Github Pages就像一台虚拟主机用来存储网站数据，管理网站内容。 Github Pages再说说Github Pages，要了解Github Pages首先你要知道Github，这是一个全球最大的开源社区，上面有很多非常优秀的开源项目，也有很多技术大牛，没事常逛逛还是挺好的这是一群乐于分享的人的舞台。如果你没有Github的账号，可以用自己的邮箱注册一个。Github Pages其实就是由Github托管的项目自动生成的一个网站页面，当然我们用了Hexo框架以后，我们就可以更多样化的美化我们的网站了。 安装必要的软件接下来就有点小激动了，我们正式开始搭建网站。1.安装Nodejs 点这里温馨提示：尽量安装最新的稳定版，因为本人安装了旧版的出现了一些莫名其妙的错误，换最新的以后就好了，所以，一定安装最新版。步骤就跟着一步步来默认安装就行了。2.安装Git客户端 点这里根据你自己的系统选择合适的客户端版本，我电脑是win10的64位系统，所以我安装的是对应的win64的，如果你的电脑是32位的，那不要装错，要选择32位的版本的,其次，特别注意：git一定要安装对应的最新版的，不然会出现很多错误，我之所以这么说是因为亲身经历过，所以避免你们浪费太多不必要的时间，还是安装最新的会省去很多麻烦。 配置Hexo环境必要的安装环境搭建完，接下来就可以配置我们的Hexo框架了。在Git Bash窗口下安装Hexo 通过鼠标右键或者开始菜单栏，打开Git Bash 选择要安装的目录 cd d:/ 安装Hexo npm install -g hexo-cli 初始化Hexo hexo init blog 进入安装Hexo的目录cd d:/Hexo/blog 安装所有需要的依赖包 npm install 开启本地Hexo博客hexo server（可以简写成hexo s）到这里本地的Hexo就安装完了。接下来打开浏览器，并输入localhost:4000打开自己的博客，注意：这只是本地的，还没有上传到网上。继续， 关联Github Pages在本地建完博客以后，就需要将博客部署到远程的Github上，来让Github替我们托管博客网站。 新建仓库首先，如果你没有Github账号，那就注册一个。然后在Github上新建一个仓库（repository），命名为your_user_name.github.io，仓库名务必一样。新建玩后进入仓库点击如图所示的Settings选项。然后鼠标下滑会看见Github自动生成的Github Pages对应的网址，如图：我这边的网址是我购买的域名，别着急下面我会讲解如何解析域名，你们可以对应访问这个网址就可以打开你的Github Pages。 获取SSH Key利用这条命令进行SSH密钥生成 ssh-keygen -t rsa -C "chengyang_827@163.com" 生成密钥后进入目录C:/users/Administrator/.ssh,将id_rsa.pub(这是公钥)用记事本你打开复制内容，然后到Github中[添加公钥](https://github.com/settings/keys)。完成后利用*ssh -T git@github*检测是否连通。 ### 修改_config.yml文件 然后进入Blog安装目录下打开_config.yml文件，我用的是Sublime Text，编辑如下： deploy: type: git repo: git@github.com:chengyang827/chengyang827.github.io.git branch: master 修改这里的repo，type并添加分支branch ### 生成和部署静态页面 接下来就是将本地的Hexo部署到Github上了。 首先你需要安装一个模块组件hexo-deployer-git，输入命令： npm install hexo-deployer-git --save 然后你就可以在Git Bash中输入以下命令： 生成静态页面 hexo generate(简写成hexo g) 部署 hexo deploy(简写成hexo d) 如果想要清楚浏览器缓存 hexo clean 想要新建一篇博客可以输入 hexo new "title" 激动人心的时刻到了！现在已经完成了Hexo+Github的基本部署，你可以打开your_user_name.github.io看看你的博客到底长啥样了。就像这样： 解析自己的域名如果你觉得github.io这个域名不好看或者不好听的话，那么你可以去购买一个属于自己的个人域名，价格也不贵，博主买了20大洋三年的。我是去西部数码买的域名，挺不错的。1.进入自己的域名解析页面，添加如下两条记录2.进入本地目录blog/source目录下新建文件CNAME,然后将自己域名添加进去保存。最后再hexo g &amp; hexo d 部署完成后就可以用新域名来打开我们的博客了，到这里博客的基本配置完工。想要美化自己的博客，继续关注我的下一篇博文。如果在安装中出现什么问题，可以评论留言，也可以添加微信公众号留言，我会即时回复的。 所谓的痛苦，不过是对自己无能的愤怒]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客 Github</tag>
      </tags>
  </entry>
</search>
