<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星空笔记</title>
  <subtitle>成长路上，五味杂陈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chengyang827.top/"/>
  <updated>2017-09-17T11:36:31.661Z</updated>
  <id>http://chengyang827.top/</id>
  
  <author>
    <name>Michael Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript学习笔记（1）</title>
    <link href="http://chengyang827.top/5.html"/>
    <id>http://chengyang827.top/5.html</id>
    <published>2017-09-15T13:25:17.000Z</published>
    <updated>2017-09-17T11:36:31.661Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><h1 id="语言介绍"><a href="#语言介绍" class="headerlink" title="语言介绍"></a>语言介绍</h1><h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><p>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><h2 id="JavaScript-是脚本语言"><a href="#JavaScript-是脚本语言" class="headerlink" title="JavaScript 是脚本语言"></a>JavaScript 是脚本语言</h2><p>JavaScript 是一种轻量级的编程语言。<br>JavaScript 是可插入 HTML 页面的编程代码。<br>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。<br>JavaScript 很容易学习。</p><h2 id="面向对象语言"><a href="#面向对象语言" class="headerlink" title="面向对象语言"></a>面向对象语言</h2><p>后面我会专门写一篇有关面向对象文章。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="操作符优先级（高到低）"><a href="#操作符优先级（高到低）" class="headerlink" title="操作符优先级（高到低）"></a>操作符优先级（高到低）</h2><p>算数操作符 -&gt; 比较操作符 -&gt; 逻辑操作符 -&gt; “=”赋值符号​</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>常用事件<br><img src="http://owf2kruia.bkt.clouddn.com/05_shijian.png-starnotes" alt="hexo"></p><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>Javasscript中一切均对象，比如：字符串、数值、数组、函数等，对象拥有属性和方法，对象的属性如数组长度.length，后面不加（）；对象方法后面加（）像函数。</p><h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><p>定义字符串对象<br>方法<br>toUpperCase()将字符串转换为大写<br>toLowerCase()将字符串转换为小写<br>charAt(index)返回指定位置字符<br>indexOf(指定字符串，开始检索的位置)返回指定字符串首次出现的位置<br>split(指定分割位置，分割次数)用于分割字符串，并返回数组类型<br>substring(开始位置，结束位置+1)提取字符串，前闭后开<br>substr(开始位置，长度)指定数目字符</p><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>用于定义日期对象<br>方法<br>get/setFullYear() 返回/设置年份<br>getDay()返回星期，返回数字0-6<br>get/setTime()返回/设置时间</p><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><p>用于定义数组对象<br>对象属性<br>length 返回数组长度<br>对象方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_array.png-starnotes" alt="hexo"></p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>对象属性<br><img src="http://owf2kruia.bkt.clouddn.com/05_math1.png-starnotes" alt="hexo"><br>对象方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_math2.pngstarnotes" alt="hexo"></p><h1 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h1><h2 id="window对象（窗口）"><a href="#window对象（窗口）" class="headerlink" title="window对象（窗口）"></a>window对象（窗口）</h2><p>对象方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_window.png-starnotes" alt="hexo"></p><h2 id="window-history对象（浏览器历史）"><a href="#window-history对象（浏览器历史）" class="headerlink" title="window.history对象（浏览器历史）"></a>window.history对象（浏览器历史）</h2><p>对象属性<br>length 返回浏览器历史列表中url数量<br>对象方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_history.png-starnotes" alt="hexo"></p><h2 id="location对象（url信息）"><a href="#location对象（url信息）" class="headerlink" title="location对象（url信息）"></a>location对象（url信息）</h2><p>location对象属性<br><img src="http://owf2kruia.bkt.clouddn.com/05_location.png-starnotes" alt="hexo"></p><p>对象方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_location2.png-starnotes" alt="hexo"></p><h2 id="navigator对象（包含浏览器信息）"><a href="#navigator对象（包含浏览器信息）" class="headerlink" title="navigator对象（包含浏览器信息）"></a>navigator对象（包含浏览器信息）</h2><p>对象属性<br><img src="http://owf2kruia.bkt.clouddn.com/05_navigator1.png-starnotes" alt="hexo"></p><h2 id="screen对象（获取屏幕信息）"><a href="#screen对象（获取屏幕信息）" class="headerlink" title="screen对象（获取屏幕信息）"></a>screen对象（获取屏幕信息）</h2><p>对象属性<br><img src="http://owf2kruia.bkt.clouddn.com/05_screen.png-starnotes" alt="hexo"></p><h1 id="DOM对象（控制HTML网页）"><a href="#DOM对象（控制HTML网页）" class="headerlink" title="DOM对象（控制HTML网页）"></a>DOM对象（控制HTML网页）</h1><p>认识DOM<br><img src="http://owf2kruia.bkt.clouddn.com/05_dom1.png-starnotes" alt="hexo"></p><h2 id="DOM节点类型"><a href="#DOM节点类型" class="headerlink" title="DOM节点类型"></a>DOM节点类型</h2><p>元素节点：上图中html、body、p等都是元素节点，即标签。<br>文本节点:向用户展示的内容，如li标签中的JavaScript、DOM、CSS等文本。<br>属性节点:元素属性，如a标签的链接属性href=”<a href="http://www.imooc.com&quot;。" target="_blank" rel="external">http://www.imooc.com&quot;。</a><br>节点属性<br><img src="http://owf2kruia.bkt.clouddn.com/05_dom2.png-starnotes" alt="hexo"><br>节点方法<br><img src="http://owf2kruia.bkt.clouddn.com/05_dom3.png-starnotes" alt="hexo"><br><img src="http://owf2kruia.bkt.clouddn.com/05_dom4.png-starnotes" alt="hexo"></p><p>注意：前两个是document方法<br>​</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;语言介绍&quot;&gt;&lt;a href=&quot;#语言介绍&quot; class=&quot;headerlink&quot; title=&quot;语言介绍&quot;&gt;&lt;/a&gt;语言介绍&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="前端" scheme="http://chengyang827.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://chengyang827.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler,最好用的Web调试工具</title>
    <link href="http://chengyang827.top/4.html"/>
    <id>http://chengyang827.top/4.html</id>
    <published>2017-08-30T07:51:55.000Z</published>
    <updated>2017-09-17T11:36:21.387Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><p><img src="http://owf2kruia.bkt.clouddn.com/04_fiddler.png-starnotes" alt="fiddler"><br>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展。</p><p>你对HTTP协议越了解，你就能越掌握Fiddler的使用方法.你越使用Fiddler,就越能帮助你了解HTTP协议。</p><p>Fiddler无论对开发人员或者测试人员来说，都是非常有用的工具。</p><p>Fiddler的官方网站：www.fiddler2.com</p><h1 id="Fiddle安装"><a href="#Fiddle安装" class="headerlink" title="Fiddle安装"></a>Fiddle安装</h1><p>下载地址：<a href="https://www.telerik.com/download/fiddler-wizard" target="_blank" rel="external">https://www.telerik.com/download/fiddler-wizard</a><br>请先选择版本下载，双击即可安装。<br><br></p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>Fiddler是以代理web服务器的形式工作的,它使用代理地址:127.0.0.1, 端口:8888. 当运行Fiddler时会自动设置代理,退出的时候它会自动注销代理，不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下Fiddler。</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_yuanli.png-starnotes" alt="yuanli"><br><br></p><h1 id="常见使用环境"><a href="#常见使用环境" class="headerlink" title="常见使用环境"></a>常见使用环境</h1><p><img src="http://owf2kruia.bkt.clouddn.com/04_envir.png-starnotes" alt="envir"><br><br></p><h1 id="工具条常用功能"><a href="#工具条常用功能" class="headerlink" title="工具条常用功能"></a>工具条常用功能</h1><p><img src="http://owf2kruia.bkt.clouddn.com/04_kit.png-starnotes" alt="kit"><br>工具栏从左到右按钮功能分别为：</p><ol><li>增加备注——选中某个会话，点击按钮，可对会话添加备注</li><li>回放按钮——选中某个会话，点击按钮，回放对该会话的请求。快捷键为R</li><li>清空监控面板</li><li>调试Debug</li><li>模式切换——在流模式和缓冲模式之间切换，默认缓冲模式</li><li>解压请求——将HTTPS的请求解压，以便查看</li><li>保持会话——考虑电脑性能，自行选择</li><li>过滤请求——按下按钮不放，选择要捕获的软件进程，松开按钮，即可捕捉到该软件发出的所有请求</li><li>查找——点击，输入想查找的会话</li><li>保存会话</li><li>保存截图</li><li>计时器</li><li>快速启动浏览器</li><li>清除缓存15.编码/解码</li></ol><p><br></p><h1 id="状态栏操作"><a href="#状态栏操作" class="headerlink" title="状态栏操作"></a>状态栏操作</h1><p><img src="http://owf2kruia.bkt.clouddn.com/04_zhuangtailan.png-starnotes" alt="zhuangtailan"></p><ol><li>上面黑色区域为控制台，用于输入命令。</li><li>下面从左到右分别为：<br>(1)控制Fiddler是否工作——图标出现：表示Fiddler工作；图标消失：表示Fiddler不工作<br>(2)过滤会话来源<br>(3)记录当前展示的会话数量<br>(4)会话的详细地址</li></ol><p><br></p><h1 id="监控面板使用"><a href="#监控面板使用" class="headerlink" title="监控面板使用"></a>监控面板使用</h1><p><img src="http://owf2kruia.bkt.clouddn.com/04_jiankong.png-starnotes" alt="jiankong"><br>左侧框中常见项：</p><p>“#”列：表示记录来自服务器端的请求会话”Result”列：表示会话状态”Protocol”列：表示协议”Host”列：表示主机地址/域名</p><p>右侧框中常见项：</p><p>“Statistics”项：表示请求的性能指标”Show Chart”项：表示可视化”Inspectors”项：表示对请求解包”AutoResponder”项：表示文件代理”Composer”项：表示前后端接口连调”Log”项：表示记录log日志”Timeline”项：表示网站性能分析<br><br></p><h1 id="文件、文件夹代理和HOST配置"><a href="#文件、文件夹代理和HOST配置" class="headerlink" title="文件、文件夹代理和HOST配置"></a>文件、文件夹代理和HOST配置</h1><p>HOST配置</p><p>这个功能主要作用就是不需要每次配置hosts都到windows目录下去修改hosts文件；可以直接方便在fiddler界面里面配置即可；方便快速的配置自己的测试host。</p><p>步骤如下：Tools》HOSTS》激活Enable功能》选择服务器IP，修改要配置的Host的IP》save》刷新可启用</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_host.png-starnotes" alt="host"><br><br></p><h1 id="文件、文件夹代理"><a href="#文件、文件夹代理" class="headerlink" title="文件、文件夹代理"></a>文件、文件夹代理</h1><p>选中文件，拖入AutoResponders界面》精准匹配》选择本地文件》保存即可生效</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_wenjianjia.png-starnotes" alt="wenjianjia"><br><br></p><h1 id="请求模拟-前后端接口调试"><a href="#请求模拟-前后端接口调试" class="headerlink" title="请求模拟,前后端接口调试"></a>请求模拟,前后端接口调试</h1><p><img src="http://owf2kruia.bkt.clouddn.com/04_request.png-starnotes" alt="request"><br><br></p><h1 id="网速限制"><a href="#网速限制" class="headerlink" title="网速限制"></a>网速限制</h1><p>方法一：</p><p>Fiddle提供了一个功能，让我们模拟低速网路环境…启用方法如下：Rules → Performances → Simulate Modem Speeds (如下图)</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_wangsuxianzhi.png-starnotes" alt="wangsu"></p><p>方法二：</p><p>Fiddler也可以自己定义Modem Speeds.点开Rules → Customize Rules (如下图)</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_waytwo.png-starnotes" alt="waytwo"></p><p>此时，如果没有安装FiddleScript插件，会弹出提示安装，点击确认即可安装；如果有安装插件，会弹出CustomRules.js的代码，找m_SimulateModem这个字，你会找到下面这段：<br><img src="http://owf2kruia.bkt.clouddn.com/04_plugins.png-starnotes" alt="plugins"></p><p>这就是他模拟网路速度的原理，每上传/下载1KB 要delay 多久。如果你习惯用kbps 去算的话，那么我们的算法就是 1000/下载速度 = 需要delay的时间(毫秒)，比如50kb/s 需要delay200毫秒来接收数据。</p><p>请注意，当你存档之后，原本已经勾选的Simulate Modem Speeds 会被取消勾选，要记得再到Rules → Performances → Simulate Modem Speeds 勾选，这样限制网速就成功了。<br><br></p><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><p>插件官方下载地址:<a href="www.telerik.com/fiddler/add-ons">www.telerik.com/fiddler/add-ons</a>。Fiddle也支持第三方插件。</p><p>以下推荐几款插件：</p><p>1.代码格式化插件：JavaScript Formatter。安装完重启，右击会话，选择“Make JavaScript Pretty”,即可。如下图。</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_moreplugins.png-starnotes" alt="moreplugins"></p><p>2.对比会话插件：Traffic Differ。安装完重启，可在“监控面板”右侧找到“Differ”选项，点击，拖动多个会话即可对比信息。如下图。</p><p><img src="http://owf2kruia.bkt.clouddn.com/04_huihua.png-starnotes" alt="huihua"><br><br></p><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><pre><code>help    //打开官方的使用页面介绍
select    //选择会话命令
?.png     //用来选择png后缀的图片
cls    //清屏  (Ctrl+x 也可以清屏)
bpu  //截获request
</code></pre><p><br></p><blockquote class="blockquote-center">做人智商不高没关系，情商不高也问题不大，但做人的格局已定要大。说白了，你可以不聪明，也可以不懂交际，但一定要大气。如果一点点挫折就让你爬不起来，如果一两句坏话就让你不能释怀，如果动不动就讨厌人憎恨人，那格局就太小了。做人有多大气，就会有多成功。因为胸怀，才是成功者的标志。</blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;img src=&quot;http://owf2kruia.bkt.clouddn.com/04_fiddler.png-starnotes&quot; alt=&quot;f
    
    </summary>
    
      <category term="工具教程" scheme="http://chengyang827.top/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Fiddler" scheme="http://chengyang827.top/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客百度SEO完整教程</title>
    <link href="http://chengyang827.top/6.html"/>
    <id>http://chengyang827.top/6.html</id>
    <published>2017-08-24T06:47:22.000Z</published>
    <updated>2017-09-17T11:36:40.672Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><p>这是一篇关于百度SEO的文章，我经过参考多篇博客并解决很多问题后，成功让百度找到了我！<br>写这篇文章是希望你们能少遇到点坑，从而节约更多的时间，我会尽量详细的描述每个关键的细节。<br>如果过程中有什么问题解决不了的可以在下方留言，我会一一回复。</p><h1 id="安装sitemap依赖包"><a href="#安装sitemap依赖包" class="headerlink" title="安装sitemap依赖包"></a>安装sitemap依赖包</h1><p>进入你的博客安装目录，输入以下命令：</p><pre><code>npm install hexo-generator-sitemap --save #sitemap.xml谷歌搜素引擎
npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml百度搜索引擎
</code></pre><h1 id="配置站点文件-conf-yml"><a href="#配置站点文件-conf-yml" class="headerlink" title="配置站点文件_conf.yml"></a>配置站点文件_conf.yml</h1><pre><code>#自动生成Sitemap
sitemap: 
  path: sitemap.xml
baidusitemap: 
  path: baidusitemap.xml
</code></pre><p>特别注意格式缩进，建议直接copy我的代码。</p><pre><code># URL
## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;
url: http://chengyang827.top
root: /
</code></pre><p>修改为你自己的url。</p><h1 id="生成-xml文件"><a href="#生成-xml文件" class="headerlink" title="生成.xml文件"></a>生成.xml文件</h1><pre><code>hexo g
</code></pre><p>生成静态文件，查看public目录下是否有sitemap.xml和baidusitemap.xml这两个文件，如果有，说明生成站点地图成功，继续。</p><h1 id="给出站链接添加”nofollow”属性"><a href="#给出站链接添加”nofollow”属性" class="headerlink" title="给出站链接添加”nofollow”属性"></a>给出站链接添加”nofollow”属性</h1><p>主要在两个文件中修改，分别是your-hexo-site\themes\next\layout_partials路径下的footer.swig和your-hexo-site\themes\next\layout_macro路径下的sidebar.swig<br>footer.swig两处:</p><pre><code>&lt;a class=&quot;theme-link&quot; href=&quot;https://hexo.io&quot;
&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;
</code></pre><p>a标签中加上rel属性即可</p><pre><code>rel=&quot;external nofollow&quot;
</code></pre><p>sidebar.swig两处：</p><pre><code>&lt;a href=&quot;{{ link }}&quot; target=&quot;_blank&quot; title=&quot;{{ name }}&quot;
&lt;a href=&quot;https://creativecommons.org/{% if theme.creative_commons === 'zero' %}publicdomain/zero/1.0{% else %}licenses/{{ theme.creative_commons }}/4.0{% endif %}/&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;
</code></pre><p>同样在后面加上rel属性</p><pre><code>rel=&quot;external nofollow&quot;
</code></pre><h1 id="生成文章关键字"><a href="#生成文章关键字" class="headerlink" title="生成文章关键字"></a>生成文章关键字</h1><p>只需在博客根目录下找到scaffolds/post.md打开，添加keywords关键字即可</p><pre><code>keywords: 
</code></pre><h1 id="首页title优化"><a href="#首页title优化" class="headerlink" title="首页title优化"></a>首页title优化</h1><p>更改index.swig文件，文件路径是your-hexo-site\themes\next\layout，将下面代码</p><pre><code>{% block title %} {{ config.title }} {% endblock %}  改成
	{% block title %} {{ config.title }} - {{ theme.description }} {% endblock %}
</code></pre><p>这时候你的首页标题会更符合网站名称 - 网站描述这习惯。</p><h1 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h1><p>Hexo默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长。</p><p>对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。</p><p>编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可。</p><h1 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h1><h2 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h2><p>打开百度输入如下信息：<br><img src="http://owf2kruia.bkt.clouddn.com/06_sousuo.png-starnotes" alt="sousuo"><br>点击提交网址后，添加自己的站点<br><img src="http://owf2kruia.bkt.clouddn.com/06_tianjia.png-starnotes" alt="tianjia"><br>然后选择站点属性，这个看你自己，然后验证站点，如图，有三种方式：<br><img src="http://owf2kruia.bkt.clouddn.com/06_yanzheng.png-starnotes" alt="yanzheng"><br>我建议使用第二种，成功率高一点<br>打开D:/your-hexo-blog/themes/next/layout/_partials下的head.swig，并在头部添加如下属性：</p><pre><code>&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;57rCOr0UvR&quot; /&gt;
</code></pre><p>其中content以你自己生成的为标准。<br>完成后hexo g -d 一下，再点击网页上的验证就ok了。</p><h2 id="添加robots-txt并更新"><a href="#添加robots-txt并更新" class="headerlink" title="添加robots.txt并更新"></a>添加robots.txt并更新</h2><p>首先解释一下，robots这个文件主要是为了让百度的爬虫抓到我们的页面。<br>在博客根目录的source文件夹下创建文件robots.txt，并添加以下内容</p><pre><code>User-agent: *
Allow: /
Allow: /archives/
Allow: /categories/
Allow: /about/

Disallow: /vendors/
Disallow: /js/
Disallow: /css/
Disallow: /fonts/
Disallow: /vendors/
Disallow: /fancybox/

Sitemap: http://chengyang827.top/sitemap.xml
Sitemap: http://chengyang827.top/baidusitemap.xml
</code></pre><p>把相关网站地址改为你自己的Allow是你的菜单栏结构，根据你自己的修改就可以了。<br>添加完robots后要重新部署一下<br>然后在站长平台按下图操作,检测并更新robots：<br><img src="http://owf2kruia.bkt.clouddn.com/06_robots.png-starnotes" alt="robots"></p><h2 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h2><p>这边我主要介绍自动提交下的三种提交</p><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>因为主动推送需要几个步骤，所以我写了一个自动化脚本来简化操作。<br>选择一个目录，新建文件hook（无后缀），并添加以下内容：</p><pre><code>#!/bin/bash -l
PUBLIC_WWW=D:/github/shaonbean/shaonbean
cd $PUBLIC_WWW
hexo clean &amp;&amp; hexo g
echo &quot;-------------------&quot;
cd $PUBLIC_WWW/public/
#寻找public文件夹下的所有html页面，并放入1.txt下
grep -r -l &apos;index.html&apos; * &gt;&gt; 1.txt
#给所有html页面补全网址信息
sed &apos;s/^/http:\/\/chengyang827.top\/&amp;/g&apos; 1.txt  &gt;&gt;urls.txt
rm 1.txt
#curl方式主动推送
curl -H &apos;Content-Type:text/plain&apos; --data-binary @urls.txt &quot;http://data.zz.baidu.com/urls?site=chengyang827.top&amp;token=j2Xt9MWGIqIdIkIV&quot;
echo &quot;--------------------&quot;
cd $PUBLIC_WWW
hexo d
if [[ $? == 0 ]]
then
    echo &quot;------------------------------------------------------&quot;
    echo &quot;Congratulations! Your blog has been correctly deployed&quot;
    echo &quot;------------------------------------------------------&quot;
else
    echo &quot;.......................................................&quot;
    echo &quot;Unfortunately your blog has not been deployed correctly&quot;
    echo &quot;.......................................................&quot;
fi
</code></pre><p>只需在脚本目录下执行bash hook即可。<br>这个脚本可以完成博客的主动推送，并且自动部署。</p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>打开D:/your-hexo-blog/themes/next/layout/_partials下的head.swig，并在顶部加载条后一行添加百度页面给出的js脚本即可。</p><h3 id="sitemap推送"><a href="#sitemap推送" class="headerlink" title="sitemap推送"></a>sitemap推送</h3><p>添加地址（网址改为你自己的）</p><pre><code>http://chengyang827.top/sitemap.xml
http://chengyang827.top/baidusitemap.xml
</code></pre><p>并提交后即可。</p><p>谷歌的和百度相似，自己探索吧，当然这只是简单的seo，你需要学习的东西还有很多。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;这是一篇关于百度SEO的文章，我经过参考多篇博客并解决很多问题后，成功让百度找到了我！&lt;br&gt;写这篇文章是希望你们能少遇到点坑，从而节约更多的时间，我
    
    </summary>
    
      <category term="博客搭建" scheme="http://chengyang827.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://chengyang827.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Next主题打造炫酷的个性化Hexo博客</title>
    <link href="http://chengyang827.top/2.html"/>
    <id>http://chengyang827.top/2.html</id>
    <published>2017-08-22T01:20:37.000Z</published>
    <updated>2017-09-17T11:36:00.223Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><p><img src="http://owf2kruia.bkt.clouddn.com/02_hexo.png-starnotes" alt="hexo"><br><br><br>上一篇博客，我主要介绍了为什么要建博客和如何建自己的博客，相信大家按照教程都能把自己的博客建起来。那么问题来了，建完的博客，不符合自己的口味怎么办？那就仔细看看这篇关于个性化博客的文章吧，相信你能有所收获。<br><br><br>好，下面就来介绍如何具体搭建。</p><p><br></p><h1 id="选择Next主题"><a href="#选择Next主题" class="headerlink" title="选择Next主题"></a>选择Next主题</h1><p><br><br>在hexo根目录下安装next主题，输入：</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><p>然后在站点配置文件_config.yml下修改字段theme的值为next，OK.<br><br></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><br><br>声明这篇博客是建立在你已经完成了官方Next使用文档的一些基础设置，如果你还没有设置，那么<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">点击这里</a><br><br></p><h1 id="实现fork-me-on-github"><a href="#实现fork-me-on-github" class="headerlink" title="实现fork me on github"></a>实现fork me on github</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_github.png-starnotes" alt="github"><br>我是把图片放在右上角的，当然你也可以放在左上角，根据喜好而定。<br><br><br>具体实现：<br><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">点击这里</a><br>选择你需要的样式复制代码，然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在</p><div class="headband"></div>的下面)，并把href改为你的github地址，如图<br><img src="http://owf2kruia.bkt.clouddn.com/02_layoutswig.png-starnotes" alt="layoutsiwg"><br><br><p></p><h1 id="实现RSS"><a href="#实现RSS" class="headerlink" title="实现RSS"></a>实现RSS</h1><p><br><br>RSS，又叫简易信息聚合，简单说，他主要用于网站内容的发布，使得其他站点能同步调用，具体是什么，可以参照<a href="https://baike.baidu.com/item/rss/24470" target="_blank" rel="external">百度词条</a>,下面我主要介绍如何实现RSS。<br><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_rss.png-starnotes" alt="rss"><br><br><br>具体实现：<br>1.在git bash中切换到hexo的根目录下即：<br><img src="http://owf2kruia.bkt.clouddn.com/02_hexo_dir.png-starnotes" alt="hexo_dir"></p><pre><code>cd d:/github/shaonbean/shaonbean(这是我的目录，你们根据自己的)
</code></pre><p>2.安装nodejs模块hexo-generator-feed</p><pre><code>npm isntall hexo-generator-feed --save
</code></pre><p>3.配置站点文件<br>打开站点配置文件(hexo根目录下的)_config.yml，添加如下字段：</p><pre><code># Extensions
## Plugins: http://hexo.io/plugins/
plugins: hexo-generate-feed
</code></pre><p>4.配置主题文件<br>打开主配置文件_config.yml(next主题下的)，添加:</p><pre><code># Set rss to false to disable feed link.
# Leave rss as empty to use site&apos;s feed link.
# Set rss to specific value if you have burned your feed already.
rss: /atom.xml
</code></pre><p>5.生成atom.xml文件<br>运行命令</p><pre><code>hexo g
</code></pre><p>之后会在public文件夹下生成一个atom.xml文件，然后部署到github就可以了。<br><br></p><h1 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h1><p><br><br>这里效果图看我博客就可以了。<br><br><br>具体实现：<br>在主题配置文件_config.yml下,搜索字段canvas 可以看到如下：<br><img src="http://owf2kruia.bkt.clouddn.com/02_canvastheme.png-starnotes" alt="canvastheme"><br>这里的主题选择你喜欢的改为true就可以了。（注意：只能不能同时设置2个以上动态效果）<br><br></p><h1 id="背景图片添加"><a href="#背景图片添加" class="headerlink" title="背景图片添加"></a>背景图片添加</h1><p><br><br>效果同样看我博客就可以。<br><br><br>具体实现：<br>进入这个目录下D:\github\shaonbean\shaonbean\themes\next\source\css_custom，打开custom.styl。这里说明一下，这个文件是设计这个主题的人专门为我们留的一个自定义设置样式的文件，我们在这里的css设置可以覆盖主题原来的，是不是很方便。</p><pre><code>#添加背景图片
body {
    background:url(/uploads/background3.png);
    background-repeat: no-repeat;
    background-attachment:fixed;
    background-position:50% 50%; 
}
</code></pre><p>这样背景图片就添加好了，你们可以选择自己喜欢的图片添加到这个目录下themes\next\source\uploads，如果没有可以自己新建一个。<br><br></p><h1 id="鼠标点击爱心效果"><a href="#鼠标点击爱心效果" class="headerlink" title="鼠标点击爱心效果"></a>鼠标点击爱心效果</h1><p><br><br>效果见我博客。<br><br><br>具体实现：<br>1.打开<a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="external">这里</a>，复制这段js代码，然后在themes/next/source/js/src下新建love.js文件，并将代码复制进去。<br>2.打开themes\next\layout_layout.swig，在文件底部添加：</p><pre><code>&lt;!-- 页面点击小红心 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;
</code></pre><p>然后重新生成就可以了。<br><br></p><h1 id="侧边栏社交小图标设置"><a href="#侧边栏社交小图标设置" class="headerlink" title="侧边栏社交小图标设置"></a>侧边栏社交小图标设置</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_xiaotubiao.png-starnotes" alt="xiaotubiao"><br><br><br>具体实现：<br>打开主题配置文件_config.yml，搜索social,添加自己的社交链接，如下：<br><img src="http://owf2kruia.bkt.clouddn.com/02_social.png" alt="social"><br><br></p><h1 id="主页文章阴影效果"><a href="#主页文章阴影效果" class="headerlink" title="主页文章阴影效果"></a>主页文章阴影效果</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_shadow.png-starnotes" alt="shadow"><br><br><br>具体实现：<br>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><pre><code>// 主页文章添加阴影效果
 .post {
   margin-top: 60px;
   margin-bottom: 60px;
   padding: 25px;
   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);
   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);
  }
</code></pre><p><br></p><h1 id="网站底部添加字数统计"><a href="#网站底部添加字数统计" class="headerlink" title="网站底部添加字数统计"></a>网站底部添加字数统计</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_wordcount.png-starnotes" alt="wordcount"><br><br><br>具体实现：<br>1.切换到根目录，运行命令</p><pre><code>npm install hexo-wordcount --save
</code></pre><p>2.然后在themes/next/layout/_partials/footer.swig文件尾部加上：</p><pre><code>&lt;div class=&quot;theme-info&quot;&gt;
  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;
  &lt;span class=&quot;post-count&quot;&gt;博客全站共{{ totalcount(site) }}字&lt;/span&gt;
&lt;/div&gt;
</code></pre><p><br></p><h1 id="设置网站效果图"><a href="#设置网站效果图" class="headerlink" title="设置网站效果图"></a>设置网站效果图</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_favicon.png-starnotes" alt="favicon"><br><br><br>具体实现：<br>将favicon图标放在source目录下就可以了，注意图片格式为32*32的后缀为ico的图片，.ico图片可以在线制作。<br><br></p><h1 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h1><p><br><br>打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_poweredby.png-starnotes" alt="poweredby"><br><br></p><h1 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h1><p><br><br>效果图：<br><img src="http://owf2kruia.bkt.clouddn.com/02_password.png-starnotes" alt="password"><br><br><br>具体实现：<br>1.打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：<br><img src="http://owf2kruia.bkt.clouddn.com/02_passwordjs.png-starnotes" alt="passwordjs"></p><pre><code>&lt;script&gt;
    (function(){
        if(&apos;{{ page.password }}&apos;){
            if (prompt(&apos;请输入文章密码&apos;) !== &apos;{{ page.password }}&apos;){
                alert(&apos;密码错误！&apos;);
                history.back();
            }
        }
    })();
&lt;/script&gt;
</code></pre><p><br><br>2.然后在你的文章head中写成这样即可：<br><img src="http://owf2kruia.bkt.clouddn.com/02_passwordtitle.png-starnotes" alt="passwordtitle"><br><br></p><h1 id="为博客加上萌宠"><a href="#为博客加上萌宠" class="headerlink" title="为博客加上萌宠"></a>为博客加上萌宠</h1><p><br><br>效果请看我博客的右下角。<br><br><br>具体实现：<br>1.安装需要的模块</p><pre><code>npm install hexo-helper-live2d --save
</code></pre><p>2.然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到之前：</p><pre><code>{{ live2d() }}
</code></pre><p>3.然后在站点配置文件中添加参数：</p><pre><code>live2d:
  model: tororo
  bottom: -30
</code></pre><p>之后重新hexo s 一下，效果就出现了。<br><br><br>下面是一些model，可以换不同的宠物</p><p>model 模型名称 默认值: z16</p><ul><li>Gantzert_Felixander</li><li>Epsilon2.1</li><li>haru</li><li>miku</li><li>ni-j</li><li>nico</li><li>nito</li><li>nipsilon</li><li>shizuku</li><li>tsumiki</li><li>wanko</li><li>z16</li><li>hibiki</li><li>koharu</li><li>Unitychan</li><li>tororo</li><li>hijiki</li></ul><p>好了，到这里Next主题的个性化就结束了，不知道您对自己的博客是否还满意呢？如果你还想要更多有趣的内容，欢迎继续关注我的博客更新，你也可以自己慢慢摸索出新的有趣的东西。</p><p>使用Markdown语法撰写文章，<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">点击这里</a>。</p><blockquote class="blockquote-center"><br>当你们痛感生活的疾苦之时<br>会把出生唤作悲剧<br>会把养生视为诅咒<br>并且写在你们的额上<br>那么 我要对你们说<br>只有用你们额上的汗水<br>才能洗掉你们写在额上的字句<br></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;img src=&quot;http://owf2kruia.bkt.clouddn.com/02_hexo.png-starnotes&quot; alt=&quot;hexo
    
    </summary>
    
      <category term="博客搭建" scheme="http://chengyang827.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客 个性化" scheme="http://chengyang827.top/tags/%E5%8D%9A%E5%AE%A2-%E4%B8%AA%E6%80%A7%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>《消愁》——毛不易</title>
    <link href="http://chengyang827.top/3.html"/>
    <id>http://chengyang827.top/3.html</id>
    <published>2017-08-20T08:55:15.000Z</published>
    <updated>2017-09-17T11:36:13.169Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><p><img src="http://owf2kruia.bkt.clouddn.com/03_xiaochou.png-starnotes" alt="maobuyi"></p><blockquote class="blockquote-center"><pre><code>当你走进这欢乐场
背上所有的梦与想
各色的脸上各色的妆
没人记得你的摸样
&lt;br&gt;
三巡酒过你在角落
固执的唱着苦涩的歌
听他在喧嚣里被淹没
你拿起酒杯对自己说
&lt;br&gt;
一杯敬朝阳 一杯敬月光
唤醒我的向往 温柔了寒窗
于是可以不回头的逆风飞翔
不怕心头有雨 眼底有霜
&lt;br&gt;
一杯敬故乡 一杯敬远方
守着我的善良 催着我成长
所以南北的路从此不再漫长
灵魂不再无处安放
&lt;br&gt;
一杯敬明天 一杯敬过往
支撑我的身体 厚重了肩膀
虽然从不相信所谓山高水长
人生苦短何必念念不忘
&lt;br&gt;
一杯敬自由 一杯敬死亡
宽恕我的平凡 驱散了迷惘
好吧天亮之后总是潦草离场
清醒的人最荒唐
好吧天亮之后总是潦草离场
清醒的人最荒唐
</code></pre><p></p></blockquote><br><br><br>这首歌是在一档综艺节目《明日之子》中火起来的，是由自称巨星的毛不易演唱，也是他的原唱歌曲。这首词写的真的很好。人生就像欢乐场，他用八杯酒敬了一个人的一生，借酒消愁愁更愁。一杯敬朝阳 一杯敬月光，是他敬少年的我们，向往未来，苦读寒窗；一杯敬故乡 一杯敬远方，是他敬青年的我们，故乡的亲人守着我们的善良，而远方正催着我们成长；一杯敬明天 一杯敬过往，已到中年时期支撑身体面对明天，因为过往厚重肩膀；一杯敬自由 一杯敬死亡，老年以至，唯有自由，别无他求。<br><br><br>这八杯酒喝尽了一切的愁苦，有人说，他这么年轻怎么写的出这样的歌词，我觉得可能和他的职业有关吧，他是一名男护士，每天面对的是各种各样的人，所以写出这样的歌词也就可以理解了。<br><br><br>在我看来，他是真正的明日之子。<p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;img src=&quot;http://owf2kruia.bkt.clouddn.com/03_xiaochou.png-starnotes&quot; alt=&quot;
    
    </summary>
    
      <category term="音乐" scheme="http://chengyang827.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="毛不易" scheme="http://chengyang827.top/tags/%E6%AF%9B%E4%B8%8D%E6%98%93/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo+Github Pages搭建自己的博客</title>
    <link href="http://chengyang827.top/1.html"/>
    <id>http://chengyang827.top/1.html</id>
    <published>2017-08-18T08:27:00.000Z</published>
    <updated>2017-09-17T11:35:28.556Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --><h1 id="为什么要写博客？"><a href="#为什么要写博客？" class="headerlink" title="为什么要写博客？"></a>为什么要写博客？</h1><p><br><br>博客正式上线，非常高兴。搭建这个博客前前后后大概用了2天时间，当然美化是在一边使用的过程中慢慢完善的。废话不多扯，来说说我为什么要写博客。<br><br><br>可能很多人会认为做程序员的人什么的才需要写博客，真的是这样吗？事实并非如此，任何人都可以写博客，博客有人看当然最好，但是没人看的话就不写了吗？也许有人会这样想。但是我并不这样认为，我觉得写博客最重要的一点是对自己的提高。当然写博客还有很多有点，下面我来一一列举：<br><br></p><ul><li>首先，写博客是对自己所学知识的总结。总结自己学过的东西是很重要的，再比如如果你对某个知识点不是特别了解的话，你可以通过写博客并查资料来巩固并深入了解这个知识点的内容，相信这对你来说会非常有意义。<br><br></li><li>其次，写博客也能锻炼你的语言组织表达能力。善于沟通无论在生活中还是工作中都非常重要，表达一件事情和光在脑子里想是完全不同的，如果你的表达能力太差，那么，你就不能说你所想，再比如你学习了一项技术，但是你不能把它表达出来，那说明你还没有完全掌握这项技术。<br><br></li><li>再者，写博客是对你写作能力的提升有极大的帮助。虽然，你开始写时会感觉很难写出好的东西来（就像我现在这样哈哈），但是只要坚持，我相信奇迹都会出现。写作是对思维的一种磨练，你会写作说明你是一个有思想的人。一个人有思想的活着总比浑浑噩噩好，你说是吧？<br><br></li><li>当然，写博客也许会让你出名，前提是你得写出对大家有用的而且非常精悍的文字才行，谁不想出名呢，所以希望有着出名梦的你们（还有我）能坚持写博客。<br><br></li><li>而且，写博客也是面试的加分项。同样条件的两个面试者，一个写博客，一个不写，我相信面试官肯定会选择写博客的那一个，因为善于写博客的人对自己学习的知识都有一个总结，并且很勤快。<br><br></li></ul><h1 id="为什么要自己搭建博客？"><a href="#为什么要自己搭建博客？" class="headerlink" title="为什么要自己搭建博客？"></a>为什么要自己搭建博客？</h1><p><br></p><h2 id="平台博客的局限性"><a href="#平台博客的局限性" class="headerlink" title="平台博客的局限性"></a>平台博客的局限性</h2><p>萌生写博客的念头后，我就在网上寻找各种建立博客的方法，有简单的就是直接在CSDN、博客园等平台上就可以写博客，但是听有的人说平台上写博客有太多局限，比如有些文章会被官方删除等等，这就很讨厌，还有一个缺点是广告多，这样体验会很不好，而且对我个人而言几乎一样的布局样式非常单调，显得很low。<br><br></p><h2 id="Hexo-Github-Pages的优点"><a href="#Hexo-Github-Pages的优点" class="headerlink" title="Hexo+Github Pages的优点"></a>Hexo+Github Pages的优点</h2><p>后来在掘金上无意间看见一篇利用github托管博客网站的帖子，于是仔细研究了下整个博客的搭建过程，也不难，于是各种寻找各种教程，虽然过程中踩了不少坑，但还是建成了，所以这一切都是值得的，为了让你们少踩些坑，我会在文章下面的内容中写出详细的搭建过程。不对，好像偏题了，说什么来着，对优点，我觉得最大的优点就是可以免费托管到github上，这可为我们学生党省了好多钱呢。当然，Hexo有很多非常美观的主题，我选择的是Next，下面我会仔细介绍主题的各种配置。<br><br></p><h1 id="如何搭建自己的博客？"><a href="#如何搭建自己的博客？" class="headerlink" title="如何搭建自己的博客？"></a>如何搭建自己的博客？</h1><p><br></p><h2 id="了解Hexo、Github-Pages"><a href="#了解Hexo、Github-Pages" class="headerlink" title="了解Hexo、Github Pages"></a>了解Hexo、Github Pages</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><img src="http://owf2kruia.bkt.clouddn.com/01_Hexo.jpg-starnotes" alt="Hexo"><br>首先，我们得了解什么是Hexo。这是官方网站贴出的对Hexo的描述，快速、简洁、且高效的博客框架，其实这就是一个基于Nodejs的一个框架结构。通俗点讲的话，Hexo用于生成静态的HTML页面，从而显示给别人看的。而下面的Github Pages就像一台虚拟主机用来存储网站数据，管理网站内容。<br><br></p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p><img src="http://owf2kruia.bkt.clouddn.com/01_GithubPages.png-starnotes" alt="Github Pages"><br>再说说Github Pages，要了解Github Pages首先你要知道Github，这是一个全球最大的开源社区，上面有很多非常优秀的开源项目，也有很多技术大牛，没事常逛逛还是挺好的这是一群乐于分享的人的舞台。如果你没有Github的账号，可以用自己的邮箱注册一个。Github Pages其实就是由Github托管的项目自动生成的一个网站页面，当然我们用了Hexo框架以后，我们就可以更多样化的美化我们的网站了。<br><br></p><h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><p>接下来就有点小激动了，我们正式开始搭建网站。<br><br><br>1.安装Nodejs <a href="https://nodejs.org/en/" target="_blank" rel="external">点这里</a><br>温馨提示：尽量安装最新的稳定版，因为本人安装了旧版的出现了一些莫名其妙的错误，换最新的以后就好了，所以，一定安装最新版。步骤就跟着一步步来默认安装就行了。<br><br><br>2.安装Git客户端 <a href="https://git-scm.com/" target="_blank" rel="external">点这里</a><br>根据你自己的系统选择合适的客户端版本，我电脑是win10的64位系统，所以我安装的是对应的win64的，<strong>如果你的电脑是32位的，那不要装错，要选择32位的版本的</strong>,其次，特别注意：git一定要安装对应的最新版的，不然会出现很多错误，我之所以这么说是因为亲身经历过，所以避免你们浪费太多不必要的时间，还是安装最新的会省去很多麻烦。<br><br></p><h2 id="配置Hexo环境"><a href="#配置Hexo环境" class="headerlink" title="配置Hexo环境"></a>配置Hexo环境</h2><p>必要的安装环境搭建完，接下来就可以配置我们的Hexo框架了。<br><br><br>在Git Bash窗口下安装Hexo</p><ul><li>通过鼠标右键或者开始菜单栏，打开Git Bash</li><li>选择要安装的目录<pre>
   <code>cd d:/</code>
</pre></li><li>安装Hexo<pre>
   <code>npm install -g hexo-cli</code>
</pre></li><li>初始化Hexo<pre>
   <code>hexo init blog</code>
</pre></li><li>进入安装Hexo的目录<pre><code>cd d:/Hexo/blog</code></pre></li><li>安装所有需要的依赖包<pre>
   <code>npm install</code>
</pre></li><li>开启本地Hexo博客<br><pre><code>hexo server（可以简写成hexo s）</code></pre><br>到这里本地的Hexo就安装完了。<br>接下来打开浏览器，并输入<em>localhost:4000</em>打开自己的博客，注意：这只是本地的，还没有上传到网上。继续，<br><br></li></ul><h2 id="关联Github-Pages"><a href="#关联Github-Pages" class="headerlink" title="关联Github Pages"></a>关联Github Pages</h2><p>在本地建完博客以后，就需要将博客部署到远程的Github上，来让Github替我们托管博客网站。<br><br></p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>首先，如果你没有Github账号，那就注册一个。然后在Github上新建一个仓库（repository），命名为your_user_name.github.io，仓库名务必一样。新建玩后进入仓库点击如图所示的Settings选项。<br><img src="http://owf2kruia.bkt.clouddn.com/01_Settings.png-starnotes" alt="Settings"><br>然后鼠标下滑会看见Github自动生成的Github Pages对应的网址，如图：<br><img src="http://owf2kruia.bkt.clouddn.com/01_Pages.png-starnotes" alt="Pages"><br>我这边的网址是我购买的域名，别着急下面我会讲解如何解析域名，你们可以对应访问这个网址就可以打开你的Github Pages。<br><br></p><h3 id="获取SSH-Key"><a href="#获取SSH-Key" class="headerlink" title="获取SSH Key"></a>获取SSH Key</h3><p>利用这条命令进行SSH密钥生成</p><pre>
    <code>ssh-keygen -t rsa -C "chengyang_827@163.com"</code>
</pre>生成密钥后进入目录C:/users/Administrator/.ssh,将id_rsa.pub(这是公钥)用记事本你打开复制内容，然后到Github中[添加公钥](https://github.com/settings/keys)。完成后利用*ssh -T git@github*检测是否连通。<br>### 修改_config.yml文件 然后进入Blog安装目录下打开_config.yml文件，我用的是Sublime Text，编辑如下：<pre>
        <code>deploy:
              type: git
              repo: git@github.com:chengyang827/chengyang827.github.io.git
              branch: master</code>
    </pre>修改这里的repo，type并添加分支branch<br>### 生成和部署静态页面 接下来就是将本地的Hexo部署到Github上了。 首先你需要安装一个模块组件hexo-deployer-git，输入命令：<pre><code>npm install hexo-deployer-git --save</code></pre><p>然后你就可以在Git Bash中输入以下命令：</p><ul><li><p>生成静态页面</p><pre><code>hexo generate(简写成hexo g)</code></pre></li><li><p>部署</p><pre><code>hexo deploy(简写成hexo d)</code></pre></li><li><p>如果想要清楚浏览器缓存</p><pre><code>hexo clean</code></pre></li><li><p>想要新建一篇博客可以输入</p><pre><code>hexo new "title"</code></pre></li></ul><p>激动人心的时刻到了！现在已经完成了Hexo+Github的基本部署，你可以打开your_user_name.github.io看看你的博客到底长啥样了。就像这样：<br><img src="http://owf2kruia.bkt.clouddn.com/01_initial.png-starnotes" alt="initial"><br><br></p><h2 id="解析自己的域名"><a href="#解析自己的域名" class="headerlink" title="解析自己的域名"></a>解析自己的域名</h2><p>如果你觉得github.io这个域名不好看或者不好听的话，那么你可以去购买一个属于自己的个人域名，价格也不贵，博主买了20大洋三年的。我是去西部数码买的域名，挺不错的。<br>1.进入自己的域名解析页面，添加如下两条记录<br><img src="http://owf2kruia.bkt.clouddn.com/01_parse.png-starnotes" alt="parse"><br>2.进入本地目录blog/source目录下新建文件CNAME,然后将自己域名添加进去保存。<br>最后再hexo g &amp; hexo d 部署完成后就可以用新域名来打开我们的博客了，到这里博客的基本配置完工。想要美化自己的博客，继续关注我的下一篇博文。<br><br><br>如果在安装中出现什么问题，可以评论留言，也可以添加微信公众号留言，我会即时回复的。</p><blockquote class="blockquote-center">所谓的痛苦，不过是对自己无能的愤怒</blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Sep 17 2017 21:51:45 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;为什么要写博客？&quot;&gt;&lt;a href=&quot;#为什么要写博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写博客？&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://chengyang827.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客 Github" scheme="http://chengyang827.top/tags/%E5%8D%9A%E5%AE%A2-Github/"/>
    
  </entry>
  
</feed>
